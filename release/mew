#!/bin/bash
SERVICES=() 
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
# Write text
# @param text
function write {
	printf "%s" "${@:1}"
}
#------------------
# Write text within a line
# @param text
function writeline {
	printf "%s\n" "${@:1}"
}
#-----------------------
# Draw a horizontal line
# @param symbol | text length should be 1
function drawline {
	printf '%*s' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "${1}"
}
#-----------------------
# Draw a line of text on screen
# @param text to be drawn
# @param distance from left screen
function drawtext {
	printf '%*s' "${COLUMNS:-$2}" ' '
	write "${1}"
}
#------------------------
# Align text
# @param alignment - left, right, center, ..
function align {
	read -r text
	local distance=${#text}
	local maxlength
	maxlength="$(tput cols)"
	case "${1}" in
	left)
		let distance=0
	;;
	right)
		let distance=$((maxlength-distance))
	;;
	center)
		let maxlength=$((maxlength/2))
		let distance=$((distance/2))
		let distance=$((maxlength-distance))
	;;
	*)
		return
	;;
	esac;
	drawtext "${text}\n" $distance
}
#------------------------
# Write title
# @param text
function writetitle {
	writeline
	drawline "="
	write "${1^^}" | align center
	drawline "="
}
#----------------
# Current path
function path {
	write "$( cd "$( dirname "$0" )" pwd || nul )"
}
#-----------------------
# Check function existence
# @param $name
function function_exists {
	type -t "$1" | grep "function" >/dev/null
}
#-----------------------
# Service existence
# @param $name
function exists {
	sudo service --status-all 2>/dev/null | grep "$1*" >/dev/null
}
#-----------------------
# Service running
# @param $name
function running {
	sudo pgrep "$1" >/dev/null
}
#---------------------
# Check if element exists in array
# @param $haystack[@]
# @param $needle
function array_exists {
	declare -a haystack=("${!1}")
	local needle=${2}
	for i in "${haystack[@]}"; do
		if [ "$i" = "$needle" ]; then
			return 0
		fi
	done
	return 1
}
#--------------------
# Check if string match all regexp in array
# @param $regexp[@]
# @param $string
function array_regexp {
	declare -a haystack=("${!1}")
	local needle=${2}
	for i in "${haystack[@]}"; do
		if [[ ${needle} =~ ${i} ]]; then
			return 0
		fi
	done
	return 1
} 
# mew mew mew
function mew {
	drawline "-"
	writeline
	writeline
	write " \ (.=^ ã‚§^=) / Hello " | align center
	writeline
	write "I am a silly cat ..." | align center
	writeline
	write "But I look Good And Happy" | align center
	writeline
	write "..." | align center
	writeline
	write "Never mind, just give me a hug (>w<)" | align center
	writeline
	drawline "-"
	write "'Software is like sex: it's better when it's free' - Linus Torvalds" | align right
	drawline "-"
}

# Update
function update {
	local url="https://raw.githubusercontent.com/madle/mew/master/release/mew"
	curl "$url" 2>/dev/null > "mew-latest" && sudo cp "mew-latest" "$0" && sudo chmod +x "$0" && writeline "This script has been updated."
	sudo rm -f "mew-latest"
}
#=========================================
# Intro
function about {
	writetitle "MADLE EASY WEB SERVER DEPLOYMENT"
	write " @author : Madle" | align center
	write " @copyright : Madle (c) 2015" | align center
	write " @copyright : TitanBox (c) 2015" | align center
	write " @url : https://github.com/madle/mew" | align center
	drawline "-"
	write " Thank you for using my software" | align center
}
#=========================================
function service_apply {
	local name="$1"
	local action="$2"
	local supported=(
		""
		"start"
		"stop"
		"restart"
		"running"
	)
	# try to get realname with defined methods
	local realname="${name}"".name"
	if function_exists "$realname"; then
		name="$( ${realname} )"
	fi
	if array_exists supported[@] "$action"; then
	case "$action" in
		"")
			if exists "$name"; then
				write "service:${name} is installed."
			else
				write "service:${name} is not installed."
			fi
		;;
		"running")
			if running "$name"; then
				write "service:${name} is running"
					else
						write "service:${name} is not running"
			fi
		;;
		"version")
			local version="${name}"".version"
			if function_exists "$version" && version="$( ${version} )"; then
				write "service:${name} version is ${version}."
			else
				write "Can't get service:${name} version."
			fi
		;;
		"name")
			write "${name}"
		;;
		*)
			write "service:${name} is ${action}ing"
			service "$name" "$action" >/dev/null
		;;
	esac;
	else
		write "Action:${action} is not allowed."
	fi
}

#=========================================
# INIT ARGUMENTS AND RUN PROGRAMS
#=========================================
function main {
	program="$1"
	service="$1"
	action="$2"
	for pragment in "${@:2}"; do
		program+=".$pragment"
	done

	if function_exists "$program"; then
		$program
	elif array_exists SERVICES[@] "$service"; then
		service_apply "$service" "$action"
	else
		write "MODULE NOT FOUND."
	fi
}

main "$@"
writeline