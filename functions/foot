# mew mew mew
function meow {
	drawtext "-"
	write " \ (.=^ ã‚§^=) / Hello " | align center
	writeline
	write "I am a silly cat ..." | align center
	writeline
	write "But I look good and happy" | align center
	writeline
	write "..." | align center
	writeline
	write "Never mind, just give me a hug (>w<)" | align center
	drawtext "-"
	write "'Software is like sex: it's better when it's free' - Linus Torvalds"
	drawtext "-"
}

# Update
function update {
	local url="https://raw.githubusercontent.com/madle/mew/master/release/mew"
	sudo curl "$url" 2>/dev/null > "mew-latest" && cp "mew-latest" $0 && sudo chmod +x $0 && writeline "This script has been updated."
	sudo rm -f "tib-latest"
}
#=========================================
# Intro
function about {
	writetitle "MADLE EASY WEB SERVER DEPLOYMENT"
	write " @author : Madle" | align center
	write " @copyright : Madle (c) 2015" | align center
	write " @copyright : TitanBox (c) 2015" | align center
	write " @url : https://github.com/madle/mew" | align center
	drawline "-"
	write " Thank you for using my software" | align center
}
#=========================================
function service_apply {
	local name="$1"
	local action="$2"
	local supported=(
		""
		"start"
		"stop"
		"restart"
		"running"
	)
	# try to get realname with defined methods
	local realname="${name}"".name"
	if function.exists $realname; then
		name="$( ${realname} )"
	fi
	if array.exists supported[@] $action; then
	case "$action" in
		"")
			if exists $name; then
				write "service:${name} is installed."
			else
				write "service:${name} is not installed."
			fi
		;;
		"running")
			if running $name; then
				write "service:${name} is running"
					else
						write "service:${name} is not running"
			fi
		;;
		"version")
			local version="${name}"".version"
			function.exists $version && version="$( ${version} )" && write "service:${name} version is ${version}." || write "Can't get service:${name} version."
		;;
		"name")
			write "${name}"
		;;
		*)
			write "service:${name} is ${action}ing"
			service "$name" "$action" >/dev/null
		;;
	esac;
	else
		write "Action:${action} is not allowed."
	fi
}

#=========================================
# INIT ARGUMENTS AND RUN PROGRAMS
#=========================================
function main {
	program="$1"
	service="$1"
	action="$2"
	for pragment in ${@:2}; do
		program+=".$pragment"
	done

	if function_exists $program; then
		$program
	elif array_exists SERVICES[@] $service; then
		service_apply $service $action
	else
		write "MODULE NOT FOUND."
	fi
}

main $@
writeline